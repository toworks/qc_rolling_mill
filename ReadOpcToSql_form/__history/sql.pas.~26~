unit sql;

interface

uses
  SysUtils, Classes, Windows, ActiveX, FIB, FIBQuery, pFIBQuery, FIBDatabase,
  pFIBDatabase, pFIBErrorHandler, Data.DB, FIBDataSet, pFIBDataSet, ZAbstractDataset,
  ZDataset, ZAbstractConnection, ZConnection, ZAbstractRODataset;

type
  TSql = class

  private
    { Private declarations }
  protected

  end;

var
  SqlService: TSql;
  pFIBDatabase1: TpFIBDatabase;
  FQueryOPC: TFIBQuery;
  pFIBTransaction1: TpFIBTransaction;
  PConnect: TZConnection;
  PQuery: TZQuery;

//  {$DEFINE DEBUG}

  function ConfigFirebirdSetting(InData: bool): bool;
  function ConfigPostgresSetting(InData: bool): bool;


implementation

uses
  settings, logging, main_form;

function ConfigFirebirdSetting(InData: bool): bool;
begin
  if InData then
  begin
      try
        pFIBDatabase1 := TpFIBDatabase.Create(nil);
        FQueryOPC := TpFIBQuery.Create(nil);
        pFIBTransaction1 := TpFIBTransaction.Create(nil);
        pFIBTransaction1.DefaultDatabase := pFIBDatabase1;
        FQueryOPC.Database := pFIBDatabase1;
        FQueryOPC.Transaction := pFIBTransaction1;
        pFIBDatabase1.Connected := false;
        pFIBDatabase1.LibraryName := CurrentDir + '\' + FbSqlConfigArray[3];
        pFIBDatabase1.DBName := FbSqlConfigArray[1] + ':' + FbSqlConfigArray[2];
        pFIBDatabase1.ConnectParams.UserName := FbSqlConfigArray[5];
        pFIBDatabase1.ConnectParams.Password := FbSqlConfigArray[6];
        pFIBDatabase1.ConnectParams.CharSet := 'NONE';// 'UNICODE_FSS';//'UTF8';//'ASCII';//'WIN1251';
        pFIBDatabase1.SQLDialect := strtoint(FbSqlConfigArray[4]);
        pFIBDatabase1.UseLoginPrompt := false;
        pFIBDatabase1.Timeout := 0;
        pFIBDatabase1.Connected := true;
        pFIBDatabase1.AutoReconnect := true;
        pFIBTransaction1.Active := false;
        pFIBTransaction1.Timeout := 0;
      except
        on E: Exception do
          SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
      end;
  end
  else
  begin
        pFIBDatabase1.Free;
        FQueryOPC.Free;
        pFIBTransaction1.Free;
  end;
end;


function ConfigPostgresSetting(InData: bool): bool;
begin
  if InData then
  begin
    PConnect := TZConnection.Create(nil);
    PQuery := TZQuery.Create(nil);

    try
      PConnect.LibraryLocation := CurrentDir + '\libpq.dll';
      PConnect.Protocol := 'postgresql-9';
              PConnect.HostName := 'krr-sql38';
              PConnect.Port := 5432;
              PConnect.User := 'QCRollingMill';
              PConnect.Password := 'WC7HdvCjC57YJ9';
              PConnect.Database := MsSqlConfigArray[i,4];
      PConnect.Connect;
      PQuery.Connection := PConnect;
    except
      on E: Exception do
        SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
    end;
  end
  else
  begin
      PQuery.Free;
      PConnect.Free;
  end;
end;


// При загрузке программы класс будет создаваться
initialization

SqlService := TSql.Create;


// При закрытии программы уничтожаться
finalization

SqlService.Destroy;

end.
