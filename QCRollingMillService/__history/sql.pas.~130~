unit sql;

interface

uses
  SysUtils, Classes, Windows, ActiveX, ZAbstractDataset, ZDataset,
  ZConnection, ZCompatibility;

type
  TSql = class

  private
    { Private declarations }
  protected

  end;

type
  TArrayArrayVariant = array of array of variant;

var
  SqlService: TSql;
  OraQuery: TZQuery;
  OraConnect: TZConnection;
  PConnect: TZConnection;
  PQuery: TZQuery;

//  {$DEFINE DEBUG}

  function ConfigOracleSetting(InData: bool): bool;
  function ConfigPostgresSetting(InData: bool): bool;
  function RolledMelting(InSide: integer): string;
  function SqlCarbonEquivalent(InHeat: string): TArrayArrayVariant;
  function CalculatedData(InSide: integer; InData: string): bool;


implementation

uses
  settings, logging, main, thread_calculated_data;



function ConfigPostgresSetting(InData: bool): bool;
begin
  if InData then
  begin
    PConnect := TZConnection.Create(nil);
    PQuery := TZQuery.Create(nil);

    try
        PConnect.LibraryLocation := CurrentDir + '\'+ PgSqlConfigArray[3];
        PConnect.Protocol := 'postgresql-9';
        PConnect.HostName := PgSqlConfigArray[1];
        PConnect.Port := strtoint(PgSqlConfigArray[6]);
        PConnect.User := PgSqlConfigArray[4];
        PConnect.Password := PgSqlConfigArray[5];
        PConnect.Database := PgSqlConfigArray[2];
//        PConnect.Properties.Add('codepage=UTF8');
//        PConnect.Properties.Add('client_encoding=WIN1251'); //проблемы с кодировкой
        PConnect.Connect;
        PQuery.Connection := PConnect;
    except
      on E: Exception do
        SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
    end;
  end
  else
  begin
      FreeAndNil(PQuery);
      FreeAndNil(PConnect);
  end;
end;


function ConfigOracleSetting(InData: bool): bool;
var
  ConnectString : String;
begin
  if InData then
  begin
        OraConnect := TZConnection.Create(nil);
        OraQuery := TZQuery.Create(nil);

      try
         ConnectString:='(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = '
                +OraSqlSettings.ip+')(PORT = '+inttostr(OraSqlSettings.port)
                +'))) (CONNECT_DATA = (SERVICE_NAME = '+
                OraSqlSettings.db_name+')))';
         OraConnect.Database := ConnectString;
         OraConnect.LibraryLocation := '.\oci.dll';// отказалс€ от полных путей не читает
         OraConnect.Protocol := 'oracle';
         OraConnect.User := OraSqlSettings.user;
         OraConnect.Password := OraSqlSettings.password;
         OraConnect.AutoEncodeStrings := true;// перекодировка с сервера в клиент
         OraConnect.ClientCodepage := 'CL8MSWIN1251';// кодировка на сервере
         OraConnect.ControlsCodePage := cCP_UTF8;// кодировка на клиенте
         // or
{         OraConnect.Properties.Add('AutoEncodeStrings=ON');// перекодировка с сервера в клиент
         OraConnect.Properties.Add('codepage=CL8MSWIN1251"');// кодировка на сервере
         OraConnect.Properties.Add('controls_cp=CP_UTF8');// кодировка на клиенте}
         OraConnect.Connect;
         OraQuery.Connection := OraConnect;
         OraSqlSettings.configured := true;
      except
        on E: Exception do
          SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
      end;
  end
  else
  begin
        OraSqlSettings.configured := false;
        FreeAndNil(OraConnect);
        FreeAndNil(OraQuery);
  end;
end;


function RolledMelting(InSide: integer): string;
var
  i: integer;
  // -- Side - 1 права€ - не четна€, 2 лева€ - четна€, сторона | мс5 0 лева 1 права€
  Grade: string; // марка стали
  Section: string; // профиль
  Standard: string; // стандарт
  StrengthClass: string; // клас прочности
  c, mn, si, _type: string;
  ReturnValue: string;
  PQueryCalculation: TZQuery;
begin
  PQueryCalculation := TZQuery.Create(nil);
  PQueryCalculation.Connection := PConnect;

  if InSide = 0 then
  begin
    Grade := left.Grade;
    Section := left.Section;
    Standard := left.Standard;
    StrengthClass := left.StrengthClass;
    c :=  left.c;
    mn := left.mn;
    si := left.si;
  end
  else
  begin
    Grade := right.Grade;
    Section := right.Section;
    Standard := right.Standard;
    StrengthClass := right.StrengthClass;
    c := right.c;
    mn := right.mn;
    si := right.si;
  end;

  for i := 0 to 1 do
  begin
    if i = 0 then
      _type := 'yield_point'
    else
      _type := 'rupture_strength';

    // -- получение прокатаных плавок не больше 125 или согласно плавки
    PQueryCalculation.Close;
    PQueryCalculation.sql.Clear;
    PQueryCalculation.sql.Add('select distinct t1.heat, t1.timestamp from temperature_current t1');
    PQueryCalculation.sql.Add('inner join');
    PQueryCalculation.sql.Add('chemical_analysis t2');
    PQueryCalculation.sql.Add('on t1.heat = t2.heat');
    PQueryCalculation.sql.Add('inner join');
    PQueryCalculation.sql.Add('technological_sample t3');
    PQueryCalculation.sql.Add('on translate(t3.strength_class, ');
    PQueryCalculation.sql.Add('''≈“ќ–јЌ ’—¬ћеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    PQueryCalculation.sql.Add('= translate(t1.strength_class, ');
    PQueryCalculation.sql.Add('''≈“ќ–јЌ ’—¬ћеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    PQueryCalculation.sql.Add('and t3.diameter_min <= '+Section+' and t3.diameter_max >= '+Section+'');
    PQueryCalculation.sql.Add('and t3.c_min <= '+c+' and t3.c_max >= '+c+'');
    PQueryCalculation.sql.Add('and t3.mn_min <= '+mn+' and t3.mn_max >= '+mn+'');
    PQueryCalculation.sql.Add('and t3.si_min <= '+si+' and t3.si_max >= '+si+'');
    PQueryCalculation.sql.Add('where t1.timestamp<=EXTRACT(EPOCH FROM now())');
    PQueryCalculation.sql.Add('and t1.timestamp>=EXTRACT(EPOCH FROM now())-(2629743*10)');// timestamp 2629743 month * 10
    PQueryCalculation.sql.Add('and translate(t3.strength_class,');
    PQueryCalculation.sql.Add('''≈“ќ–јЌ ’—¬ћеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    PQueryCalculation.sql.Add('like translate('''+StrengthClass+''',');
    PQueryCalculation.sql.Add('''≈“ќ–јЌ ’—¬ћеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    PQueryCalculation.sql.Add('and t3.c_min <= t2.c and t3.c_max >= t2.c');// отсекаем с несовпадающей химией
    PQueryCalculation.sql.Add('and t3.mn_min <= t2.mn and t3.mn_max >= t2.mn');
    PQueryCalculation.sql.Add('and t3.si_min <= t2.si and t3.si_max >= t2.si');
    PQueryCalculation.sql.Add('and t1.section = '+Section+'');// отсекаем по диаметру
    PQueryCalculation.sql.Add('and t1.side = '+inttostr(InSide)+'');
    PQueryCalculation.sql.Add('and t3.type like '''+_type+'''');
    PQueryCalculation.sql.Add('and t1.bad_to_calculate = 0');
    PQueryCalculation.sql.Add('order by t1.timestamp desc');
    PQueryCalculation.sql.Add('LIMIT 125');
    PQueryCalculation.Open;
    PQueryCalculation.FetchAll;

{$IFDEF DEBUG}
  SaveLog('debug'+#9#9+'PQueryCalculation.SQL.Text -> '+PQueryCalculation.sql.Text);
{$ENDIF}
    if PQueryCalculation.RecordCount  > 5 then
    begin
      break;
{$IFDEF DEBUG}
  SaveLog('debug'+#9#9+'PQueryCalculation.RecordCount -> '+inttostr(PQueryCalculation.RecordCount));
{$ENDIF}
    end;
  end;

  i := 0;
  while not PQueryCalculation.Eof do
  begin
    if i = 0 then
      ReturnValue := ReturnValue + PQueryCalculation.FieldByName('heat').AsString
    else
      ReturnValue := ReturnValue + '|' + PQueryCalculation.FieldByName('heat').AsString;

    inc(i);
    PQueryCalculation.Next;
  end;

  FreeAndNil(PQueryCalculation);

{$IFDEF DEBUG}
  SaveLog('debug' + #9#9 + 'Heat -> ' + ReturnValue);
{$ENDIF}
  Result := ReturnValue;
end;


function SqlCarbonEquivalent(InHeat: string): TArrayArrayVariant;
var
  i: integer;
  HeatCeArray: TArrayArrayVariant;
  PQueryCe: TZQuery;
begin
  PQueryCe := TZQuery.Create(nil);
  PQueryCe.Connection := PConnect;


  { дл€ 3го проката
    Module.OraQuery1.FetchAll := true;
    Module.OraQuery1.Close;
    Module.OraQuery1.SQL.Clear;
    Module.OraQuery1.SQL.Add('select NPL, C+(MN/6)+(CR/5)+((SI+B)/10) as Ce');
    Module.OraQuery1.SQL.Add('from him_steel');
    Module.OraQuery1.SQL.Add('where DATE_IN_HIM<=sysdate');
    Module.OraQuery1.SQL.Add('and DATE_IN_HIM>=sysdate-305'); //-- 305 = 10 month
    Module.OraQuery1.SQL.Add('and NUMBER_TEST=''0''');
    Module.OraQuery1.SQL.Add('and NPL in ('+InHeat+')');
    Module.OraQuery1.SQL.Add('order by DATE_IN_HIM desc');
    Module.OraQuery1.Open;

    i:=0;
    while not Module.OraQuery1.Eof do
    begin
    if i = Length(HeatCeArray) then SetLength(HeatCeArray, i+1, 2);
    HeatCeArray[i,0] := Module.OraQuery1.FieldByName('NPL').AsString;
    HeatCeArray[i,1] := Module.OraQuery1.FieldByName('Ce').AsFloat;
    inc(i);
    Module.OraQuery1.Next;
    end;
  }

  PQueryCe.Close;
  PQueryCe.Sql.Clear;
  PQueryCe.Sql.Add('select heat, c+(mn/6)+(cr/5)+((si+b)/10) as ce');
  PQueryCe.Sql.Add('from chemical_analysis');
  PQueryCe.Sql.Add('where heat in ('+InHeat+')');
  PQueryCe.Sql.Add('order by timestamp desc');
  PQueryCe.Open;

{$IFDEF DEBUG}
  SaveLog('debug' + #9#9 + 'ce -> PQueryCe.SQL.Text -> ' + PQueryCe.sql.Text);
{$ENDIF}
  i := 0;
  while not PQueryCe.Eof do
  begin
    if i = Length(HeatCeArray) then
      SetLength(HeatCeArray, i + 1, 2);
    HeatCeArray[i, 0] := PQueryCe.FieldByName('heat').AsString;
    HeatCeArray[i, 1] := PQueryCe.FieldByName('ce').AsFloat;
    inc(i);
    PQueryCe.Next;
  end;

  PQueryCe.Free;

  for i := Low(HeatCeArray) to High(HeatCeArray) do
  begin
{$IFDEF DEBUG}
    SaveLog('debug' + #9#9 + 'heat for ce -> ' + HeatCeArray[i, 0]);
    SaveLog('debug' + #9#9 + 'ce -> ' + floattostr(HeatCeArray[i, 1]));
{$ENDIF}
  end;

  Result := HeatCeArray;
end;


function CalculatedData(InSide: integer; InData: string): bool;
var
  PQueryCalculatedData: TZQuery;
  tid, heat, step: string;
begin
  PQueryCalculatedData := TZQuery.Create(nil);
  PQueryCalculatedData.Connection := PConnect;

  if InSide = 0 then
  begin
    heat := left.Heat;
    step := inttostr(left.step);
  end
  else
  begin
    heat := right.Heat;
    step := inttostr(right.step);
  end;

  PQueryCalculatedData.Close;
  PQueryCalculatedData.sql.Clear;
  PQueryCalculatedData.sql.Add('select tid FROM temperature_current');
  PQueryCalculatedData.sql.Add('where heat=''' + heat + '''');
  PQueryCalculatedData.sql.Add('and side=' + inttostr(InSide) + '');
  PQueryCalculatedData.sql.Add('ORDER BY timestamp desc LIMIT 1');
  PQueryCalculatedData.Open;

  tid := PQueryCalculatedData.FieldByName('tid').AsString;

  // delete report recalculated
  if InData.IsEmpty then
  begin
    PQueryCalculatedData.Close;
    PQueryCalculatedData.sql.Clear;
    PQueryCalculatedData.sql.Add('DELETE FROM calculated_data');
    PQueryCalculatedData.sql.Add('where cid='+tid+'');
    PQueryCalculatedData.ExecSQL;
    exit;
  end;

  PQueryCalculatedData.Close;
  PQueryCalculatedData.sql.Clear;
  PQueryCalculatedData.sql.Add('select cid FROM calculated_data');
  PQueryCalculatedData.sql.Add('where cid='+tid+'');
  PQueryCalculatedData.sql.Add('and step='+step+'');
  PQueryCalculatedData.Open;

  if PQueryCalculatedData.FieldByName('cid').IsNull then
  begin
    PQueryCalculatedData.Close;
    PQueryCalculatedData.sql.Clear;
    PQueryCalculatedData.sql.Add('INSERT INTO calculated_data (cid, step)');
    PQueryCalculatedData.sql.Add('VALUES ('+tid+', '+step+')');
    PQueryCalculatedData.ExecSQL;
  end;
//  else
  begin
    PQueryCalculatedData.Close;
    PQueryCalculatedData.sql.Clear;
    PQueryCalculatedData.sql.Add('UPDATE calculated_data SET ' + InData + '');
    PQueryCalculatedData.sql.Add('where cid='+tid+'');
    PQueryCalculatedData.sql.Add('and step='+step+'');
    PQueryCalculatedData.ExecSQL;
  end;

  FreeAndNil(PQueryCalculatedData);

end;




// ѕри загрузке программы класс будет создаватьс€
initialization

SqlService := TSql.Create;


// ѕри закрытии программы уничтожатьс€
finalization

SqlService.Destroy;

end.
