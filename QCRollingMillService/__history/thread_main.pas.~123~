unit thread_main;

interface

uses
  SysUtils, Classes, Windows, ActiveX;

type
  TThreadMain = class(TThread)

  private
    { Private declarations }
  protected
    procedure Execute; override;
  end;

var
  ThreadMain: TThreadMain;

//  {$DEFINE DEBUG}

procedure WrapperMain; // обертка дл€ синхронизации и выполнени€ с другим потоком
function GetHeat: bool;
function GetChemicalAnalysis(InHeat: string): bool;

implementation

uses
  logging, settings, main, sql;

procedure TThreadMain.Execute;
begin
  CoInitialize(nil);
  while not Terminated do
  begin
    Synchronize(WrapperMain);
    sleep(1000);
  end;
  CoUninitialize;
end;

procedure WrapperMain;
begin
  try
      //reconnect
      if not OraSqlSettings.configured then
         ConfigOracleSetting(true);

      // точка вместо зап€той при преобразовании в строку
      FormatSettings.DecimalSeparator := '.';
      GetHeat;
  except
    on E: Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;
end;


function GetHeat: bool;
begin
  try
    PQuery.Close;
    PQuery.SQL.Clear;
    PQuery.SQL.Add('select distinct t1.tid, t1.heat FROM temperature_current t1');
    PQuery.SQL.Add('where not exists');
    PQuery.SQL.Add('(select distinct heat FROM chemical_analysis t2 where t1.heat=t2.heat)');
    PQuery.SQL.Add('order by t1.tid desc LIMIT 1');
    PQuery.Open;
  except
    on E: Exception do
      SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
  end;

  if not PQuery.FieldByName('heat').IsNull then
    GetChemicalAnalysis(PQuery.FieldByName('heat').AsString);
end;


function GetChemicalAnalysis(InHeat: string): bool;
var
  ChemicalAnalysisArray: array [0 .. 9] of ansistring;
begin
  try
      OraQuery.Close;
      OraQuery.SQL.Clear;
      OraQuery.SQL.Add('select DATE_IN_HIM');
      OraQuery.SQL.Add(', NPL, MST, GOST, C, MN, SI, S, CR, B from him_steel');
      OraQuery.SQL.Add('where DATE_IN_HIM>=sysdate-300'); //-- 300 = 10 month
      OraQuery.SQL.Add('and NUMBER_TEST=''0''');
      OraQuery.SQL.Add('and NPL in ('''+InHeat+''')');
      OraQuery.SQL.Add('order by DATE_IN_HIM desc');
      OraQuery.Open;
      OraQuery.FetchAll;
  except
    on E : Exception do
      begin
        SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
        exit;
      end;
  end;
  //если не находим записываем фeйк
  if not OraQuery.FieldByName('NPL').IsNull then
  begin
    ChemicalAnalysisArray[0] := OraQuery.FieldByName('DATE_IN_HIM').AsString;
    ChemicalAnalysisArray[1] := UTF8Decode(OraQuery.FieldByName('NPL').AsString);
    if OraQuery.FieldByName('MST').IsNull then
      ChemicalAnalysisArray[2] := '0'
    else
      ChemicalAnalysisArray[2] := UTF8Decode(OraQuery.FieldByName('MST').AsString);
    if OraQuery.FieldByName('GOST').IsNull then
      ChemicalAnalysisArray[3] := '0'
    else
      ChemicalAnalysisArray[3] := UTF8Decode(OraQuery.FieldByName('GOST').AsString);
    if OraQuery.FieldByName('C').IsNull then
      ChemicalAnalysisArray[4] := '0'
    else
      ChemicalAnalysisArray[4] := StringReplace(OraQuery.FieldByName('C').AsString,',','.',[rfReplaceAll]);
    if OraQuery.FieldByName('MN').IsNull then
      ChemicalAnalysisArray[5] := '0'
    else
      ChemicalAnalysisArray[5] := StringReplace(OraQuery.FieldByName('MN').AsString,',','.',[rfReplaceAll]);
    if OraQuery.FieldByName('SI').IsNull then
      ChemicalAnalysisArray[6] := '0'
    else
      ChemicalAnalysisArray[6] := StringReplace(OraQuery.FieldByName('SI').AsString,',','.',[rfReplaceAll]);
    if OraQuery.FieldByName('S').IsNull then
      ChemicalAnalysisArray[7] := '0'
    else
      ChemicalAnalysisArray[7] := StringReplace(OraQuery.FieldByName('S').AsString,',','.',[rfReplaceAll]);
    if OraQuery.FieldByName('CR').IsNull then
      ChemicalAnalysisArray[8] := '0'
    else
      ChemicalAnalysisArray[8] := StringReplace(OraQuery.FieldByName('CR').AsString,',','.',[rfReplaceAll]);
    if OraQuery.FieldByName('B').IsNull then
      ChemicalAnalysisArray[9] := '0'
    else
      ChemicalAnalysisArray[9] := StringReplace(OraQuery.FieldByName('B').AsString,',','.',[rfReplaceAll]);
  end
  else
  begin
    ChemicalAnalysisArray[0] := '01.01.0001';
    ChemicalAnalysisArray[1] := InHeat;
    ChemicalAnalysisArray[2] := '0';
    ChemicalAnalysisArray[3] := '0';
    ChemicalAnalysisArray[4] := '0';
    ChemicalAnalysisArray[5] := '0';
    ChemicalAnalysisArray[6] := '0';
    ChemicalAnalysisArray[7] := '0';
    ChemicalAnalysisArray[8] := '0';
    ChemicalAnalysisArray[9] := '0';
  end;

  SaveLog('service'+#9#9+'save'+#9+'chemical analysis -> '+
                       ChemicalAnalysisArray[0]+#9+ChemicalAnalysisArray[1]+#9+
                       ChemicalAnalysisArray[2]+#9+ChemicalAnalysisArray[3]+#9+
                       ChemicalAnalysisArray[4]+#9+ChemicalAnalysisArray[5]+#9+
                       ChemicalAnalysisArray[6]+#9+ChemicalAnalysisArray[7]+#9+
                       ChemicalAnalysisArray[8]+#9+ChemicalAnalysisArray[9]);

  try
    PQuery.Close;
    PQuery.SQL.Clear;
    PQuery.SQL.Add('insert INTO chemical_analysis');
    PQuery.SQL.Add('(timestamp, heat, date_external, grade, standard, c, mn, si, s, cr, b)');
    PQuery.SQL.Add('values(EXTRACT(EPOCH FROM now()),');
    PQuery.SQL.Add(''''+ChemicalAnalysisArray[1]+''', '''+ChemicalAnalysisArray[0]+''',');
    PQuery.SQL.Add(''''+ChemicalAnalysisArray[2]+''', '''+ChemicalAnalysisArray[3]+''',');
    PQuery.SQL.Add(''+ChemicalAnalysisArray[4]+', '+ChemicalAnalysisArray[5]+',');
    PQuery.SQL.Add(''+ChemicalAnalysisArray[6]+', '+ChemicalAnalysisArray[7]+',');
    PQuery.SQL.Add(''+ChemicalAnalysisArray[8]+', '+ChemicalAnalysisArray[9]+')');
    PQuery.ExecSQL;
  except
    on E: Exception do
      SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
  end;
end;




end.
