{
  дл€ работы с OPC используетс€  OPCDAAuto.dll  из комплекта "OPC DA Auto 2.02 Source Code 5.30.msi"
  установка:
            import component -> import a type library -> OPC DA Automation Wrapper 2.02 version 1.0 ->
            pallete page ActiveX -> install new package
            compile -> install
            unhide button ActiveX (TOPCGroups,TOPCGroup,TOPCActivator,TOPCServer)
  в uses добавить (OPCAutomation_TLB,OleServer)
}

unit opc;

interface

uses
  SysUtils, Classes, Windows, ActiveX, OPCAutomation_TLB, OleServer;

type
  TOpcWorks = class


  private
    { Private declarations }
  protected

  end;

var
  OpcWorks: TOpcWorks;
  OPCServer: TOPCServer;
  OPCGroup1: TOPCGroup;
  OPCGroup: IOPCGroup;
  OPCTagArray: Array[1..10] of OPCItem;
  OPCGroupName: string = 'qc_rolling_mill';

//  {$DEFINE DEBUG}

  function ConfigOPCServer(InData: bool): bool;
  function OPCReadTags: bool;
  function SqlWriteTemperature(InTempRight, InTempLeft: integer): bool;


implementation

uses
  main, logging, settings, sql_module;



function ConfigOPCServer(InData: bool): bool;
begin

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'OpcConfigServerName -> '+OpcConfigArray[1]);
  {$ENDIF}

    if InData and (OpcConfigArray[1] <> '') then
     begin

      OPCServer := TOPCServer.Create(nil);
      OPCGroup1 :=  TOPCGroup.Create(nil);

      OPCServer.Connect1(OpcConfigArray[1]);
      OPCGroup := OPCServer.OPCGroups.Add(OPCGroupName);
      OPCGroup.UpdateRate := 500;
      OPCGroup.IsActive := true;
      OPCGroup.IsSubscribed := true;

      //создаем Tags
      OPCTagArray[1] := OPCGroup.OPCItems.AddItem(OpcConfigArray[2],1);
      OPCTagArray[2] := OPCGroup.OPCItems.AddItem(OpcConfigArray[3],2);
     end;

    if (InData = false) and (OpcConfigArray[1] <> '') then
     begin
        OPCGroup.IsActive := false;
        OPCGroup.IsSubscribed := false;
        OPCServer.OPCGroups.Remove(OPCGroupName);
        OPCServer.Disconnect;
     end;
end;


function OPCReadTags: bool;
var
  Tags: Array[1..4, 1..4] of OleVariant; //read 4 values -> source,value,quality,timestamp
begin

  OPCTagArray[1].Read(Tags[1,1],Tags[1,2],Tags[1,3],Tags[1,4]);
  OPCTagArray[2].Read(Tags[2,1],Tags[2,2],Tags[1,3],Tags[2,4]);
//  OPCTagArray[3].Read(Tags[3,1],Tags[3,2],Tags[3,3],Tags[3,4]);
//  OPCTagArray[4].Read(Tags[4,1],Tags[4,2],Tags[4,3],Tags[4,4]);

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'TempLeft -> '+inttostr(Tags[2,2]));
    SaveLog('debug'+#9#9+'TempRight -> '+inttostr(Tags[1,2]));
  {$ENDIF}

  SqlWriteTemperature(Tags[1,2], Tags[2,2]);

end;


function SqlWriteTemperature(InTempLeft, InTempRight: integer): bool;
begin

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'InTempLeft -> '+inttostr(InTempLeft));
    SaveLog('debug'+#9#9+'InTempRight -> '+inttostr(InTempRight));
  {$ENDIF}

  Settings.SQuery.Close;
  Settings.SQuery.SQL.Clear;
  Settings.SQuery.SQL.Add('CREATE TABLE IF NOT EXISTS temperature (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE');
  Settings.SQuery.SQL.Add(', timestamp DATETIME NOT NULL, heat VARCHAR(26) NOT NULL, grade VARCHAR(50)');
  Settings.SQuery.SQL.Add(', strength_class VARCHAR(50), section VARCHAR(50)');
  Settings.SQuery.SQL.Add(', standard VARCHAR(50), side integer, temperature integer)');
  Settings.SQuery.ExecSQL;

  //чистим таблицу от старых данных
  Settings.SQuery.Close;
  Settings.SQuery.SQL.Clear;
  // 2629743 - 1 мес€ц
  Settings.SQuery.SQL.Add('DELATE FROM temperature where');
  Settings.SQuery.SQL.Add('timestamp < (strftime(''%s'', ''now'')-(2629743*10)');
  Settings.SQuery.ExecSQL;

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'SQuery.SQL.Text -> '+Settings.SQuery.SQL.Text);
  {$ENDIF}


  if InTempRight > 250 then
   begin
    DataModule1.pFIBQuery1.Close;
    DataModule1.pFIBQuery1.SQL.Clear;
    DataModule1.pFIBQuery1.SQL.Add('select FIRST 1 *');
    DataModule1.pFIBQuery1.SQL.Add('FROM melts');
    DataModule1.pFIBQuery1.SQL.Add('where side=1');
    DataModule1.pFIBQuery1.SQL.Add('order by begindt desc');
    DataModule1.pFIBQuery1.ExecQuery;
    DataModule1.pFIBQuery1.Transaction.Commit;

    Settings.SQuery.Close;
    Settings.SQuery.SQL.Clear;
    Settings.SQuery.SQL.Add('insert INTO temperature');
    Settings.SQuery.SQL.Add('(timestamp, heat, grade, strength_class, section, standard, side, temperature)');
    Settings.SQuery.SQL.Add('values(strftime(''%s'', ''now''), '''+DataModule1.pFIBQuery1.FieldByName('NOPLAV').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('MARKA').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('KLASS').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('RAZM1').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('STANDART').AsString+'''');
    Settings.SQuery.SQL.Add(', 1, '+inttostr(InTempRight)+')');
    Settings.SQuery.ExecSQL;
   end;

  if InTempLeft > 250 then
   begin
    DataModule1.pFIBQuery1.Close;
    DataModule1.pFIBQuery1.SQL.Clear;
    DataModule1.pFIBQuery1.SQL.Add('select FIRST 1 *');
    DataModule1.pFIBQuery1.SQL.Add('FROM melts');
    DataModule1.pFIBQuery1.SQL.Add('where side=0');
    DataModule1.pFIBQuery1.SQL.Add('order by begindt desc');
    DataModule1.pFIBQuery1.ExecQuery;
    DataModule1.pFIBQuery1.Transaction.Commit;

    Settings.SQuery.Close;
    Settings.SQuery.SQL.Clear;
    Settings.SQuery.SQL.Add('insert INTO temperature');
    Settings.SQuery.SQL.Add('(timestamp, heat, grade, strength_class, section, standard, side, temperature)');
    Settings.SQuery.SQL.Add('values(strftime(''%s'', ''now''), '''+DataModule1.pFIBQuery1.FieldByName('NOPLAV').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('MARKA').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('KLASS').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('RAZM1').AsString+'''');
    Settings.SQuery.SQL.Add(', '''+DataModule1.pFIBQuery1.FieldByName('STANDART').AsString+'''');
    Settings.SQuery.SQL.Add(', 0, '+inttostr(InTempLeft)+')');
    Settings.SQuery.ExecSQL;
   end;

end;



// ѕри загрузке программы класс будет создаватьс€
initialization
  OpcWorks := TOpcWorks.Create;

//ѕри закрытии программы уничтожатьс€
finalization
  OpcWorks.Destroy;


end.
