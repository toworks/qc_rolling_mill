unit settings;

interface

uses
  SysUtils, Classes, Windows, ActiveX, ZAbstractDataset, ZDataset,
  ZAbstractConnection, ZConnection, ZAbstractRODataset, ZStoredProcedure;

type
  TSettings = class


  private
    { Private declarations }
  protected

  end;

var
   SettingsApp: TSettings;
   SConnect: TZConnection;
   SQuery: TZQuery;

   FbSqlConfigArray: Array[1..6, 1..6] of String;

   {$DEFINE DEBUG}

   function ConfigSettingSql(InData: bool): bool;
   function ReadConfigSetting: bool;


implementation

uses
  main, logging;



function ConfigSettingSql(InData: bool): bool;
var
  f: File of Word;
begin

  if InData then
   begin
      SConnect := TZConnection.Create(nil);
      SQuery := TZQuery.Create(nil);

      SConnect.Database := CurrentDir+'\'+DBFile;
      SConnect.LibraryLocation := CurrentDir+'\sqlite3.dll';
      SConnect.Protocol := 'sqlite-3';
      SConnect.Connect;
      SQuery.Connection := SConnect;

      AssignFile(f, CurrentDir+'\'+DBFile);
      Reset(f);

      if FileSize(f) = 0 then
       begin
          SQuery.Close;
          SQuery.SQL.Clear;
          SQuery.SQL.Add('CREATE TABLE setting (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE');
          SQuery.SQL.Add(', bof VARCHAR(10) NULL, ip VARCHAR(50) NULL');
          SQuery.SQL.Add(', user VARCHAR(50), password VARCHAR(50)');
          SQuery.SQL.Add(', db_name VARCHAR(50) NULL, procedure_name VARCHAR(50) NULL)');
          SQuery.ExecSQL;
       end;

      CloseFile(f);


      ReadConfigSetting;
   end
  else
   begin
      SQuery.Destroy;
      SConnect.Destroy;
   end;

end;


function ReadConfigSetting: bool;
var
  i: integer;
begin

    SQuery.Close;
    SQuery.SQL.Clear;
    SQuery.SQL.Add('SELECT * FROM settings');
    SQuery.Open;


    while not SQuery.Eof do
     begin
      if SQuery.FieldByName('name').AsString = '::FbSql::ip' then
        FbSqlConfigArray[1,1] := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::db_name' then
        FbSqlConfigArray[1,2] := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::library' then
        FbSqlConfigArray[1,3] := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::dialect' then
        FbSqlConfigArray[1,4] := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::user' then
        FbSqlConfigArray[1,5] := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::password' then
        FbSqlConfigArray[1,6] := SQuery.FieldByName('value').AsString;
        SQuery.Next;
     end;

end;


// При загрузке программы класс будет создаваться
initialization
  SettingsApp := TSettings.Create;

//При закрытии программы уничтожаться
finalization
  SettingsApp.Destroy;

end.
