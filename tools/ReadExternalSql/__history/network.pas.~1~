unit network;

interface

uses
  SysUtils, Classes, Windows, ActiveX, Web.Win.Sockets;

type
  TServer = class
    procedure TcpServerStatusAccept(Sender: TObject; ClientSocket: TCustomIpClient);
//    procedure TcpServerStatusCreateHandle(Sender: TObject);
//    procedure TcpServerStatusDestroyHandle(Sender: TObject);

  private
    { Private declarations }
  protected

  end;

var
   Server: TServer;
   TcpServerStatus: TTcpServer;
   TcpClientStatus: TTcpClient;
   OldStatusCount: integer = 0;
   StatusCount: integer = 0;
   LostConnectPrimary: bool = false;

//   {$DEFINE DEBUG}

   function ConfigTcpStatus(InData: bool): bool;


implementation

uses
  main, logging;




function ConfigTcpStatus(InData: bool): bool;
begin

  if InData then
   begin
    TcpServerStatus := TTcpServer.Create(nil);
    TcpServerStatus.LocalHost := '0.0.0.0';
    TcpServerStatus.LocalPort := StatusPort;
    if StatusPrimary=false then
     begin
      TcpServerStatus.Active := true;
      SaveLog('status'+#9#9+'secondary'+#9+'client'+#9+'start');
     end;
    TcpServerStatus.OnAccept := Server.TcpServerStatusAccept;
//    TcpServerStatus.OnCreateHandle := Server.TcpServerStatusCreateHandle;
//    TcpServerStatus.OnDestroyHandle := Server.TcpServerStatusDestroyHandle;

    TcpClientStatus := TTcpClient.Create(nil);
    TcpClientStatus.RemoteHost := IPSecondary;
    TcpClientStatus.RemotePort := StatusPort;
    if StatusPrimary then
     begin
      TcpClientStatus.Active := true;
      SaveLog('status'+#9#9+'primary'+#9+'server'+#9+'start');
      {$IFDEF DEBUG}
        SaveLog('debug'+#9#9+IPSecondary+#9+StatusPort);
      {$ENDIF}
     end;
   end
  else
   begin
    if StatusPrimary=false then
      begin
       TcpServerStatus.Active := false;
       SaveLog('status'+#9#9+'secondary'+#9+'client'+#9+'stop');
      end;

    if StatusPrimary then
      begin
       TcpClientStatus.Active := false;
       SaveLog('status'+#9#9+'primary'+#9+'server'+#9+'stop');
      end;
  end;

end;


procedure TServer.TcpServerStatusAccept(Sender: TObject; ClientSocket: TCustomIpClient);
var
  msg: string;
begin
  msg := ClientSocket.Receiveln('VvMkYt6SkZBRJqRo9GgDPrkyS8aCKBGfb5yzRY8E8PUnVLQnVTNZ06fxJkkLoVuJ5doAqTB8RYHSvIiYvMxSZ');
  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'old'+#9+inttostr(OldStatusCount));
  {$ENDIF}
  if msg = 'work' then
    inc(StatusCount);
end;

// При загрузке программы класс будет создаваться
initialization
  Server := TServer.Create;

//При закрытии программы уничтожаться
finalization
  Server.Destroy;



end.





