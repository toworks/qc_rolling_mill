{
  1 правая - не четная, 2 левая - четная, сторона | мс5 0 лева 1 правая
}
unit thread_sql;


interface

uses
  SysUtils, Classes, Windows, ActiveX, Graphics, Forms;

type
  //Здесь необходимо описать класс TThreadSql:
  TThreadSql = class(TThread)

  private
    { Private declarations }
  protected
    procedure Execute; override;
  end;

var
  ThreadSql: TThreadSql;
  //global
//  Side: integer = 0; //1 правая - не четная, 2 левая - четная, сторона | мс5 0 лева 1 правая
  Side: integer;
  Heat: string = ''; //плавка
  Grade: string = ''; //марка стали
  Section: string = ''; //профиль
  Standard: string = ''; //стандарт
  StrengthClass: string = ''; //клас прочности

  HeatRight: string = ''; //плавка
  GradeRight: string = ''; //марка стали
  SectionRight: string = ''; //профиль
  StandardRight: string = ''; //стандарт
  StrengthClassRight: string = ''; //клас прочности
  c_right: string = '';
  mn_right: string = '';
  cr_right: string = '';
  si_right: string = '';
  b_right: string = '';

  HeatLeft: string = ''; //плавка
  GradeLeft: string = ''; //марка стали
  SectionLeft: string = ''; //профиль
  StandardLeft: string = ''; //стандарт
  StrengthClassLeft: string = ''; //клас прочности
  c_left: string = '';
  mn_left: string = '';
  cr_left: string = '';
  si_left: string = '';
  b_left: string = '';


  function ThreadSqlInit: bool;
  function ReadHeat: bool;
  function ViewCurrentData: bool;
  procedure WrapperSql;//обертка для синхронизации и выполнения с другим потоком
  function ReadCemicalAnalysis(InHeat: string; InSide: integer): bool;
//  function SqlWriteHeatToCemicalAnalysis(InHeat: string): bool;
  function SqlWriteHeatToCemicalAnalysis: bool;
  function SqlWriteCemicalAnalysis(InData: string): bool;


//  {$DEFINE DEBUG}


implementation

uses
  main, logging, settings, sql_module, thread_chart, chart, tcp_send_read;





procedure TThreadSql.Execute;
begin
  CoInitialize(nil);
  while True do
   begin
      Synchronize(WrapperSql);
      sleep(1000);
   end;
   CoUninitialize;
end;


function ThreadSqlInit: bool;
begin
  //создаем поток
  ThreadSql := TThreadSql.Create(False);
  ThreadSql.Priority := tpNormal;
  ThreadSql.FreeOnTerminate := True;
end;


procedure WrapperSql;
begin
  Application.ProcessMessages;//следующая операция не тормозит интерфейс
  try
    ReadHeat;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;
end;


function ReadHeat: bool;
begin

  try
      SqlWriteHeatToCemicalAnalysis;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  //side left
  Module.pFIBQuery1.Close;
  Module.pFIBQuery1.SQL.Clear;
  Module.pFIBQuery1.SQL.Add('select FIRST 1 *');
  Module.pFIBQuery1.SQL.Add('FROM melts');
  Module.pFIBQuery1.SQL.Add('where side=0');
  Module.pFIBQuery1.SQL.Add('order by begindt desc');
  Module.pFIBQuery1.ExecQuery;
  Module.pFIBQuery1.Transaction.Commit;

  HeatLeft := Module.pFIBQuery1.FieldByName('NOPLAV').AsString;
  GradeLeft := Module.pFIBQuery1.FieldByName('MARKA').AsString;
  StrengthClassLeft := Module.pFIBQuery1.FieldByName('KLASS').AsString;
  SectionLeft := Module.pFIBQuery1.FieldByName('RAZM1').AsString;
  StandardLeft := Module.pFIBQuery1.FieldByName('STANDART').AsString;

  ReadCemicalAnalysis(HeatLeft,0);

  //side right
  Module.pFIBQuery1.Close;
  Module.pFIBQuery1.SQL.Clear;
  Module.pFIBQuery1.SQL.Add('select FIRST 1 *');
  Module.pFIBQuery1.SQL.Add('FROM melts');
  Module.pFIBQuery1.SQL.Add('where side=1');
  Module.pFIBQuery1.SQL.Add('order by begindt desc');
  Module.pFIBQuery1.ExecQuery;
  Module.pFIBQuery1.Transaction.Commit;

  HeatRight := Module.pFIBQuery1.FieldByName('NOPLAV').AsString;
  GradeRight := Module.pFIBQuery1.FieldByName('MARKA').AsString;
  StrengthClassRight := Module.pFIBQuery1.FieldByName('KLASS').AsString;
  SectionRight := Module.pFIBQuery1.FieldByName('RAZM1').AsString;
  StandardRight := Module.pFIBQuery1.FieldByName('STANDART').AsString;

  ReadCemicalAnalysis(HeatRight,1);

  ViewCurrentData;

  GetHeatChemicalAnalysis;

end;


function ViewCurrentData: bool;
begin

  //side left
  form1.l_global_left.Caption := 'плавка: '+HeatLeft+' | '+'марка: '+GradeLeft+' | '+
                                 'класс прочности: '+StrengthClassLeft+' | '+
                                 'профиль: '+SectionLeft+' | '+'стандарт: '+StandardLeft;
  form1.l_chemical_left.Caption := 'Химический анализ'+#9+'C: '+c_left+' | '+
                                   'Mn: '+mn_left+' | '+'Cr: '+cr_left+' | '+
                                   'Si: '+si_left+' | '+'B: '+b_left;


  //side right
  form1.l_global_right.Caption := 'плавка: '+HeatRight+' | '+'марка: '+GradeRight+' | '+
                                 'класс прочности: '+StrengthClassRight+' | '+
                                 'профиль: '+SectionRight+' | '+'стандарт: '+StandardRight;
  form1.l_chemical_right.Caption := 'Химический анализ'+#9+'C: '+c_right+' | '+
                                    'Mn: '+mn_right+' | '+'Cr: '+cr_right+' | '+
                                    'Si: '+si_right+' | '+'B: '+b_right;

end;


function ReadCemicalAnalysis(InHeat: string; InSide: integer): bool;
begin
  try
      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('SELECT c, mn, cr, si, b FROM chemical_analysis');
      Settings.SQuery.SQL.Add('where heat='''+InHeat+'''');
      Settings.SQuery.Open;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  if InSide = 0 then
   begin
    {$IFDEF DEBUG}
      SaveLog('debug'+#9#9+'Settings.SQuery.SQL.Text  left -> '+Settings.SQuery.SQL.Text);
    {$ENDIF}

    c_left := Settings.SQuery.FieldByName('c').AsString;
    mn_left :=  Settings.SQuery.FieldByName('mn').AsString;
    cr_left := Settings.SQuery.FieldByName('cr').AsString;
    si_left := Settings.SQuery.FieldByName('si').AsString;
    b_left := Settings.SQuery.FieldByName('b').AsString;

    {$IFDEF DEBUG}
      SaveLog('debug'+#9#9+'C left -> '+floattostr(Settings.SQuery.FieldByName('c').AsFloat));
    {$ENDIF}
   end;

  if InSide = 1 then
   begin
    {$IFDEF DEBUG}
      SaveLog('debug'+#9#9+'Settings.SQuery.SQL.Text right -> '+Settings.SQuery.SQL.Text);
    {$ENDIF}

    c_right := Settings.SQuery.FieldByName('c').AsString;
    mn_right :=  Settings.SQuery.FieldByName('mn').AsString;
    cr_right := Settings.SQuery.FieldByName('cr').AsString;
    si_right := Settings.SQuery.FieldByName('si').AsString;
    b_right := Settings.SQuery.FieldByName('b').AsString;

    {$IFDEF DEBUG}
      SaveLog('debug'+#9#9+'C right -> '+Settings.SQuery.FieldByName('c').AsString);
    {$ENDIF}
   end;

end;


function SqlWriteHeatToCemicalAnalysis: bool;
begin

  try
      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('CREATE TABLE IF NOT EXISTS chemical_analysis (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE');
      Settings.SQuery.SQL.Add(', timestamp DATETIME, heat VARCHAR(26) NOT NULL');
      Settings.SQuery.SQL.Add(', datetime DATETIME, grade VARCHAR(50), standard VARCHAR(50)');
      Settings.SQuery.SQL.Add(', c REAL, mn REAL, si REAL, s REAL, cr REAL, b REAL)');
      Settings.SQuery.ExecSQL;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  try
      //удаляем записи старше 10 месяцев 2629743(один месяц)*10
      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('DELETE FROM chemical_analysis');
      Settings.SQuery.SQL.Add('where strftime(''%s'', datetime)<(strftime(''%s'',''now'')-(2629743*10))');
      Settings.SQuery.SQL.Add('and datetime not null');
      Settings.SQuery.ExecSQL;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  try
{      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('INSERT INTO chemical_analysis (heat)');
      Settings.SQuery.SQL.Add('Select '''+InHeat+'''');
      Settings.SQuery.SQL.Add('Where not exists(select * from chemical_analysis where heat='''+InHeat+''')');
      Settings.SQuery.ExecSQL;}

      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('INSERT INTO chemical_analysis (heat)');
      Settings.SQuery.SQL.Add('select distinct heat from temperature');
      Settings.SQuery.SQL.Add('where not EXISTS (select heat from chemical_analysis where heat=temperature.heat)');
      Settings.SQuery.SQL.Add('order by temperature.id desc');
      Settings.SQuery.ExecSQL;

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'SQuery.SQL.Text insert heat -> '+Settings.SQuery.SQL.Text);
  {$ENDIF}
   except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;
end;


function SqlWriteCemicalAnalysis(InData: string): bool;
var
  str: TStringList;
begin
{ DATE_IN_HIM, NPL, MST, GOST, C, MN, SI, S, CR, B' }

  str := TstringList.Create;
  str.text := StringReplace(InData, '|', #13#10, [rfReplaceAll]);

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'DATE_IN_HIM -> '+str[0]);
    SaveLog('debug'+#9#9+'NPL -> '+str[1]);
    SaveLog('debug'+#9#9+'MST -> '+str[2]);
    SaveLog('debug'+#9#9+'GOST -> '+str[3]);
    SaveLog('debug'+#9#9+'C -> '+str[4]);
    SaveLog('debug'+#9#9+'MN -> '+str[5]);
    SaveLog('debug'+#9#9+'SI -> '+str[6]);
    SaveLog('debug'+#9#9+'S -> '+str[7]);
    SaveLog('debug'+#9#9+'CR -> '+str[8]);
    SaveLog('debug'+#9#9+'B -> '+str[9]);
  {$ENDIF}

  try
      Settings.SQuery.Close;
      Settings.SQuery.SQL.Clear;
      Settings.SQuery.SQL.Add('UPDATE chemical_analysis SET timestamp=strftime(''%s'',''now'')');
      Settings.SQuery.SQL.Add(', datetime='''+str[0]+''', grade='''+str[2]+'''');
      Settings.SQuery.SQL.Add(', standard='''+str[3]+''', c='+str[4]+', mn='+str[5]+'');
      Settings.SQuery.SQL.Add(', si='+str[6]+', s='+str[7]+', cr='+str[8]+', b='+str[9]+'');
      Settings.SQuery.SQL.Add('where heat='''+str[1]+'''');
      Settings.SQuery.ExecSQL;

      ShowTrayMessage('Chemical Analysis', 'получен на плавку'+#9+str[1], 1);

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'SQuery.SQL.Text update -> '+Settings.SQuery.SQL.Text);
  {$ENDIF}
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

end;




end.

