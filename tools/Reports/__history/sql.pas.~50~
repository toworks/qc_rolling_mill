unit sql;

interface

uses
  SysUtils, Classes, Windows, ActiveX, Dialogs, Forms, Data.DB, ZAbstractDataset,
  ZDataset, ZAbstractConnection, ZConnection, ZAbstractRODataset, ZStoredProcedure;

var
  PConnect: TZConnection;
  PQuery: TZQuery;
  DataSource: TDataSource;
  function ConfigPostgresSetting(InData: bool): bool;
  function SqlRead: bool;

implementation

uses
  main, settings;




function ConfigPostgresSetting(InData: bool): bool;
begin
  if InData then
  begin
    PConnect := TZConnection.Create(nil);
    PQuery := TZQuery.Create(nil);

    try
        PConnect.LibraryLocation := CurrentDir + '\'+ PgSqlConfigArray[3];
        PConnect.Protocol := 'postgresql-9';
        PConnect.HostName := PgSqlConfigArray[1];
        PConnect.Port := strtoint(PgSqlConfigArray[6]);
        PConnect.User := PgSqlConfigArray[4];
        PConnect.Password := PgSqlConfigArray[5];
        PConnect.Database := PgSqlConfigArray[2];
        PConnect.Connect;
        PQuery.Connection := PConnect;
        DataSource := TDataSource.Create(nil);
        DataSource.DataSet := PQuery;
    except
      on E: Exception do
        Showmessage('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
    end;
  end
  else
  begin
      FreeAndNil(DataSource);
      FreeAndNil(PQuery);
      FreeAndNil(PConnect);
  end;
end;


function SqlRead: bool;
begin
  try
    PQuery.Close;
    PQuery.SQL.Clear;
    PQuery.SQL.Add('SELECT t1.heat, case t1.side when 0 then ''Левая'' else ''Правая'' end');
    PQuery.SQL.Add(', t2.* from temperature_current t1');
    PQuery.SQL.Add('INNER JOIN');
    PQuery.SQL.Add('calculated_data t2');
    PQuery.SQL.Add('on t1.tid=t2.cid');
    PQuery.SQL.Add('order by t1.tid desc');
    PQuery.Open;
  except
    on E: Exception do
      Showmessage('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
  end;
end;





end.

