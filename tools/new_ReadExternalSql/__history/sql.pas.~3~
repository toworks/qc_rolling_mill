unit sql;

interface

uses
  SysUtils, Classes, Windows, ActiveX,  FIB, FIBQuery, pFIBQuery, FIBDatabase,
  pFIBDatabase, pFIBErrorHandler, Data.DB, FIBDataSet, pFIBDataSet;

type
  TSql = class

  private
    { Private declarations }
  protected

  end;

var
  SqlService: TSql;
  pFIBDatabase1: TpFIBDatabase;
  FQueryOPC: TFIBQuery;
  pFIBTransaction1: TpFIBTransaction;

  // {$DEFINE DEBUG}

function ConfigSettings(InData: bool): bool;
function SqlJournalMode: bool;
function ReadConfigSettings: bool;

implementation

uses
  settings, logging, main;

function FbInit: bool;
begin
  try
    pFIBDatabase1.Connected := false;
    pFIBDatabase1.LibraryName := '.\' + FbSqlConfigArray[3];
    pFIBDatabase1.DBName := FbSqlConfigArray[1] + ':' + FbSqlConfigArray[2];
    pFIBDatabase1.ConnectParams.UserName := FbSqlConfigArray[5];
    pFIBDatabase1.ConnectParams.Password := FbSqlConfigArray[6];
    pFIBDatabase1.ConnectParams.CharSet := 'NONE';// 'UNICODE_FSS';//'UTF8';//'ASCII';//'WIN1251';
    pFIBDatabase1.SQLDialect := strtoint(FbSqlConfigArray[4]);
    pFIBDatabase1.UseLoginPrompt := false;
    pFIBDatabase1.Timeout := 0;
    pFIBDatabase1.Connected := true;
    pFIBTransaction1.Active := false;
    pFIBTransaction1.Timeout := 0;
    FQueryOPC := TpFIBQuery.Create(nil);
    FQueryOPC.Database := pFIBDatabase1;
    FQueryOPC.Transaction := pFIBTransaction1;
  except
    on E: Exception do
      SaveLog('error' + #9#9 + E.ClassName + ', с сообщением: ' + E.Message);
  end;
end;

// При загрузке программы класс будет создаваться
initialization

SqlService := TSql.Create;
FbInit;

// При закрытии программы уничтожаться
finalization

SqlService.Destroy;

end.
