unit sql;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, mssqlconn, sqldblib, ZConnection, ZDataset,
  DateUtils, FileUtil;

type
  TArrayArrayVariant = array of array of variant;


var
  OraQuery: TZQuery;
  OraConnect: TZConnection;
  MSDBLibraryLoader: TSQLDBLibraryLoader;
  MSConnection: TMSSQLConnection;
  MSQuery: TSQLQuery;
  MSTransaction: TSQLTransaction;

  {$DEFINE DEBUG}

  function ConfigOracleSetting(InData: boolean): boolean;
  function ConfigMsSetting(InData: boolean): boolean;

  function RolledMelting(InSide: integer): string;
  function SqlCarbonEquivalent(InHeat: string): TArrayArrayVariant;
  function CalculatedData(InSide: integer; InData: string): boolean;

implementation

uses
    settings, thread_calculated_data;


function ConfigOracleSetting(InData: boolean): boolean;
var
  ConnectString : String;
begin
  if InData then
  begin
        OraConnect := TZConnection.Create(nil);
        OraQuery := TZQuery.Create(nil);

      try
         ConnectString:='(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = '
                +OraSqlSettings.ip+')(PORT = '+inttostr(OraSqlSettings.port)
                +'))) (CONNECT_DATA = (SERVICE_NAME = '+
                OraSqlSettings.db_name+')))';
         OraConnect.Database := ConnectString;
         OraConnect.LibraryLocation := '.\oci.dll';// отказался от полных путей не читает
         OraConnect.Protocol := 'oracle';
         OraConnect.User := OraSqlSettings.user;
         OraConnect.Password := OraSqlSettings.password;
         OraConnect.Connect;
         OraQuery.Connection := OraConnect;
//        OraSession.Options.Charset := 'CL8MSWIN1251';// 'AL32UTF8';//CL8MSWIN1251
         OraSqlSettings.configured := true;
      except
        on E: Exception do
          SaveLog.Log(etError, E.ClassName + ', с сообщением: ' + E.Message);
      end;
  end
  else
  begin
        FreeAndNil(OraConnect);
        FreeAndNil(OraQuery);
  end;
end;


function ConfigMsSetting(InData: boolean): boolean;
begin
  if InData then
  begin
      try
         MSDBLibraryLoader := TSQLDBLibraryLoader.Create(nil);
         MSConnection := TMSSQLConnection.Create(nil);
         MSQuery := TSQLQuery.Create(nil);
         MSTransaction := TSQLTransaction.Create(nil);

         MSDBLibraryLoader.ConnectionType := 'MSSQLServer';
         MSDBLibraryLoader.LibraryName := '.\'+MsSqlSettings.lib;

         MSConnection.DatabaseName := MsSqlSettings.db_name;
         MSConnection.HostName := MsSqlSettings.ip;
         MSConnection.Transaction := MSTransaction;

         MSTransaction.DataBase := MSConnection;
         MSTransaction.Action := caCommit;

         MSQuery.DataBase := MSConnection;
         MSQuery.Transaction := MSTransaction;
         MsSqlSettings.configured := true;
    except
      on E: Exception do
        SaveLog.Log(etError, E.ClassName + ', с сообщением: ' + E.Message);
    end;
  end
  else
  begin
      FreeAndNil(MSDBLibraryLoader);
      FreeAndNil(MSConnection);
      FreeAndNil(MSQuery);
      FreeAndNil(MSTransaction);
  end;
end;


function RolledMelting(InSide: integer): string;
var
  i: integer;
  // -- Side - 1 правая - не четная, 2 левая - четная, сторона | мс5 0 лева 1 правая
  Grade: string; // марка стали
  Section: string; // профиль
  Standard: string; // стандарт
  StrengthClass: string; // клас прочности
  c, mn, si, _type: string;
  ReturnValue: string;
  MSQueryCalculation: TSQLQuery;
begin
  MSQueryCalculation := TSQLQuery.Create(nil);
  MSQueryCalculation.DataBase := MSConnection;
  MSQueryCalculation.Transaction := MSTransaction;

  if InSide = 0 then
  begin
    Grade := left.Grade;
    Section := left.Section;
    Standard := left.Standard;
    StrengthClass := left.StrengthClass;
    c :=  left.c;
    mn := left.mn;
    si := left.si;
  end
  else
  begin
    Grade := right.Grade;
    Section := right.Section;
    Standard := right.Standard;
    StrengthClass := right.StrengthClass;
    c := right.c;
    mn := right.mn;
    si := right.si;
  end;

  for i := 0 to 1 do
  begin
    if i = 0 then
      _type := 'yield_point'
    else
      _type := 'rupture_strength';

    // -- получение прокатаных плавок не больше 125 или согласно плавки
    MSQueryCalculation.Close;
    MSQueryCalculation.sql.Clear;
    MSQueryCalculation.sql.Add('select distinct t1.heat, t1.timestamp from temperature_current t1');
    MSQueryCalculation.sql.Add('inner join');
    MSQueryCalculation.sql.Add('chemical_analysis t2');
    MSQueryCalculation.sql.Add('on t1.heat = t2.heat');
    MSQueryCalculation.sql.Add('inner join');
    MSQueryCalculation.sql.Add('technological_sample t3');
    MSQueryCalculation.sql.Add('on translate(t3.strength_class, ');
    MSQueryCalculation.sql.Add('''ЕТОРАНКХСВМеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    MSQueryCalculation.sql.Add('= translate(t1.strength_class, ');
    MSQueryCalculation.sql.Add('''ЕТОРАНКХСВМеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    MSQueryCalculation.sql.Add('and t3.diameter_min <= '+Section+' and t3.diameter_max >= '+Section+'');
    MSQueryCalculation.sql.Add('and t3.c_min <= '+c+' and t3.c_max >= '+c+'');
    MSQueryCalculation.sql.Add('and t3.mn_min <= '+mn+' and t3.mn_max >= '+mn+'');
    MSQueryCalculation.sql.Add('and t3.si_min <= '+si+' and t3.si_max >= '+si+'');
    MSQueryCalculation.sql.Add('where t1.timestamp<=EXTRACT(EPOCH FROM now())');
    MSQueryCalculation.sql.Add('and t1.timestamp>=EXTRACT(EPOCH FROM now())-(2629743*10)');// timestamp 2629743 month * 10
    MSQueryCalculation.sql.Add('and translate(t3.strength_class,');
    MSQueryCalculation.sql.Add('''ЕТОРАНКХСВМеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    MSQueryCalculation.sql.Add('like translate('''+StrengthClass+''',');
    MSQueryCalculation.sql.Add('''ЕТОРАНКХСВМеторанкхсвм'',''ETOPAHKXCBMetopahkxcbm'')');
    MSQueryCalculation.sql.Add('and t1.side = '+inttostr(InSide)+'');
    MSQueryCalculation.sql.Add('and t3.type like '''+_type+'''');
    MSQueryCalculation.sql.Add('and t1.bad_to_calculate = 0');
    MSQueryCalculation.sql.Add('order by t1.timestamp desc');
    MSQueryCalculation.sql.Add('LIMIT 125');
    MSQueryCalculation.Open;
//    MSQueryCalculation.FetchAll;

{$IFDEF DEBUG}
  SaveLog.Log(etDebug, 'MSQueryCalculation.SQL.Text -> '+MSQueryCalculation.sql.Text);
{$ENDIF}
    if MSQueryCalculation.RecordCount  > 5 then
    begin
      break;
{$IFDEF DEBUG}
  SaveLog.Log(etDebug, 'MSQueryCalculation.RecordCount -> '+inttostr(MSQueryCalculation.RecordCount));
{$ENDIF}
    end;
  end;

  i := 0;
  while not MSQueryCalculation.Eof do
  begin
    if i = 0 then
      ReturnValue := ReturnValue + MSQueryCalculation.FieldByName('heat').AsString
    else
      ReturnValue := ReturnValue + '|' + MSQueryCalculation.FieldByName('heat').AsString;

    inc(i);
    MSQueryCalculation.Next;
  end;

  FreeAndNil(MSQueryCalculation);

{$IFDEF DEBUG}
SaveLog.Log(etDebug, 'Heat -> ' + ReturnValue);
{$ENDIF}
  Result := ReturnValue;
end;


function SqlCarbonEquivalent(InHeat: string): TArrayArrayVariant;
var
  i: integer;
  HeatCeArray: TArrayArrayVariant;
  MSQueryCe: TSQLQuery;
begin
  MSQueryCe := TSQLQuery.Create(nil);
  MSQueryCe.DataBase := MSConnection;
  MSQueryCe.Transaction := MSTransaction;

  { для 3го проката
    Module.OraQuery1.FetchAll := true;
    Module.OraQuery1.Close;
    Module.OraQuery1.SQL.Clear;
    Module.OraQuery1.SQL.Add('select NPL, C+(MN/6)+(CR/5)+((SI+B)/10) as Ce');
    Module.OraQuery1.SQL.Add('from him_steel');
    Module.OraQuery1.SQL.Add('where DATE_IN_HIM<=sysdate');
    Module.OraQuery1.SQL.Add('and DATE_IN_HIM>=sysdate-305'); //-- 305 = 10 month
    Module.OraQuery1.SQL.Add('and NUMBER_TEST=''0''');
    Module.OraQuery1.SQL.Add('and NPL in ('+InHeat+')');
    Module.OraQuery1.SQL.Add('order by DATE_IN_HIM desc');
    Module.OraQuery1.Open;

    i:=0;
    while not Module.OraQuery1.Eof do
    begin
    if i = Length(HeatCeArray) then SetLength(HeatCeArray, i+1, 2);
    HeatCeArray[i,0] := Module.OraQuery1.FieldByName('NPL').AsString;
    HeatCeArray[i,1] := Module.OraQuery1.FieldByName('Ce').AsFloat;
    inc(i);
    Module.OraQuery1.Next;
    end;
  }
{{
  PQueryCe.Close;
  PQueryCe.Sql.Clear;
  PQueryCe.Sql.Add('select heat, c+(mn/6)+(cr/5)+((si+b)/10) as ce');
  PQueryCe.Sql.Add('from chemical_analysis');
  PQueryCe.Sql.Add('where heat in ('+InHeat+')');
  PQueryCe.Sql.Add('order by timestamp desc');
  PQueryCe.Open;

{$IFDEF DEBUG}
  SaveLog('debug' + #9#9 + 'ce -> PQueryCe.SQL.Text -> ' + PQueryCe.sql.Text);
{$ENDIF}
  i := 0;
  while not PQueryCe.Eof do
  begin
    if i = Length(HeatCeArray) then
      SetLength(HeatCeArray, i + 1, 2);
    HeatCeArray[i, 0] := PQueryCe.FieldByName('heat').AsString;
    HeatCeArray[i, 1] := PQueryCe.FieldByName('ce').AsFloat;
    inc(i);
    PQueryCe.Next;
  end;

  PQueryCe.Free;

  for i := Low(HeatCeArray) to High(HeatCeArray) do
  begin
{$IFDEF DEBUG}
    SaveLog('debug' + #9#9 + 'heat for ce -> ' + HeatCeArray[i, 0]);
    SaveLog('debug' + #9#9 + 'ce -> ' + floattostr(HeatCeArray[i, 1]));
{$ENDIF}
  end;

  Result := HeatCeArray;}}
end;


function CalculatedData(InSide: integer; InData: string): boolean;
var
  MSQueryCalculatedData: TSQLQuery;
  tid, heat, step, rolling_mill: string;
begin
  MSQueryCalculatedData := TSQLQuery.Create(nil);
  MSQueryCalculatedData.DataBase := MSConnection;
  MSQueryCalculatedData.Transaction := MSTransaction;

  if InSide = 0 then
  begin
    heat := left.Heat;
    step := inttostr(left.step);
    rolling_mill := left.RollingMill;
  end
  else
  begin
    heat := right.Heat;
    step := inttostr(right.step);
    rolling_mill := right.RollingMill;
  end;

  MSDBLibraryLoader.Enabled := true;
  MSConnection.Connected := true;
  MSQueryCalculatedData.Close;
  MSQueryCalculatedData.sql.Clear;
  MSQueryCalculatedData.sql.Add('select TOP 1 tid FROM temperature_current');
  MSQueryCalculatedData.sql.Add('where heat='''+heat+'''');
  MSQueryCalculatedData.sql.Add('and rolling_mill='+rolling_mill+'');
  MSQueryCalculatedData.sql.Add('and side='+inttostr(InSide)+'');
  MSQueryCalculatedData.sql.Add('ORDER BY timestamp desc');
  MSQueryCalculatedData.Open;

{$IFDEF DEBUG}
  SaveLog.Log(etDebug, 'MSQueryCalculatedData.SQL.Text -> '+MSQueryCalculatedData.sql.Text);
{$ENDIF}

  tid := MSQueryCalculatedData.FieldByName('tid').AsString;

  // delete report recalculated
  if InData{.IsEmpty} = '' then
  begin
    MSDBLibraryLoader.Enabled := true;
    MSConnection.Connected := true;
    MSQueryCalculatedData.Close;
    MSQueryCalculatedData.sql.Clear;
    MSQueryCalculatedData.sql.Add('DELETE FROM calculated_data');
    MSQueryCalculatedData.sql.Add('where cid='+tid+'');
    MSQueryCalculatedData.sql.Add('and rolling_mill='+rolling_mill+'');
    MSQueryCalculatedData.ExecSQL;
    exit;
  end;

  MSDBLibraryLoader.Enabled := true;
  MSConnection.Connected := true;
  MSQueryCalculatedData.Close;
  MSQueryCalculatedData.sql.Clear;
  MSQueryCalculatedData.sql.Add('select cid FROM calculated_data');
  MSQueryCalculatedData.sql.Add('where cid='+tid+'');
  MSQueryCalculatedData.sql.Add('and rolling_mill='+rolling_mill+'');
  MSQueryCalculatedData.sql.Add('and side='+inttostr(InSide)+'');
  MSQueryCalculatedData.sql.Add('and step='+step+'');
{$IFDEF DEBUG}
  SaveLog.Log(etDebug, 'MSQueryCalculatedData.SQL.Text -> '+MSQueryCalculatedData.sql.Text);
{$ENDIF}
  MSQueryCalculatedData.Open;

  if MSQueryCalculatedData.FieldByName('cid').IsNull then
  begin
    MSDBLibraryLoader.Enabled := true;
    MSConnection.Connected := true;
    MSQueryCalculatedData.Close;
    MSQueryCalculatedData.sql.Clear;
    MSQueryCalculatedData.sql.Add('INSERT INTO calculated_data (cid, rolling_mill,');
    MSQueryCalculatedData.sql.Add('side, step)');
    MSQueryCalculatedData.sql.Add('VALUES ('+tid+', '+rolling_mill+',');
    MSQueryCalculatedData.sql.Add(''+inttostr(InSide)+', '+step+')');
    MSQueryCalculatedData.ExecSQL;
  end;
//  else
  begin
    MSDBLibraryLoader.Enabled := true;
    MSConnection.Connected := true;
    MSQueryCalculatedData.Close;
    MSQueryCalculatedData.sql.Clear;
    MSQueryCalculatedData.sql.Add('UPDATE calculated_data SET ' + InData + '');
    MSQueryCalculatedData.sql.Add('where cid='+tid+'');
    MSQueryCalculatedData.sql.Add('and rolling_mill='+rolling_mill+'');
    MSQueryCalculatedData.sql.Add('and side='+inttostr(InSide)+'');
    MSQueryCalculatedData.sql.Add('and step='+step+'');
    MSQueryCalculatedData.ExecSQL;
  end;

  FreeAndNil(MSQueryCalculatedData);

end;





end.

